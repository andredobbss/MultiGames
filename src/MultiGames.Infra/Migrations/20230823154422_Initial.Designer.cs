// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiGames.Infra.DataBase.Context;

#nullable disable

namespace MultiGames.Infra.Migrations
{
    [DbContext(typeof(MultiGamesContext))]
    [Migration("20230823154422_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MultiGames.Domain.Entities.AddressDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CelPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateCriate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("MultiGames.Domain.Entities.BrotherDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTimeOffset>("DateCriate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Brothers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0ee2bbb-254c-48f1-b8b4-165a8da2a0ff"),
                            Cpf = "111.111.111-01",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(6442), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste01@teste.com",
                            Name = "Teste1"
                        },
                        new
                        {
                            Id = new Guid("b144f25f-0cbc-4ffb-a66a-630c7115a119"),
                            Cpf = "222.222.222-02",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(7036), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste02@teste.com",
                            Name = "Teste2"
                        },
                        new
                        {
                            Id = new Guid("1e1e0439-cb8b-41ca-88f2-649d6ad76065"),
                            Cpf = "333.333.333-03",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(7394), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste03@teste.com",
                            Name = "Teste3"
                        },
                        new
                        {
                            Id = new Guid("5b09be78-3f35-4406-87bb-7b91b87607fc"),
                            Cpf = "444.444.444-04",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(7747), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste04@teste.com",
                            Name = "Teste4"
                        },
                        new
                        {
                            Id = new Guid("16e4c410-547b-4c58-b29f-669795d801e0"),
                            Cpf = "555.555.555-05",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(8107), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste05@teste.com",
                            Name = "Teste5"
                        },
                        new
                        {
                            Id = new Guid("f85d2b70-bfc3-4af8-a741-7903fb444f54"),
                            Cpf = "666.666.666-06",
                            DateCriate = new DateTimeOffset(new DateTime(2023, 8, 23, 15, 44, 22, 787, DateTimeKind.Unspecified).AddTicks(8436), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teste06@teste.com",
                            Name = "Teste6"
                        });
                });

            modelBuilder.Entity("MultiGames.Domain.Entities.GameDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrotherDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCriate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOut")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VersionEdition")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("BrotherDomainId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("MultiGames.Domain.Entities.BrotherDomain", b =>
                {
                    b.HasOne("MultiGames.Domain.Entities.AddressDomain", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MultiGames.Domain.Entities.GameDomain", b =>
                {
                    b.HasOne("MultiGames.Domain.Entities.BrotherDomain", null)
                        .WithMany("Games")
                        .HasForeignKey("BrotherDomainId");
                });

            modelBuilder.Entity("MultiGames.Domain.Entities.BrotherDomain", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
